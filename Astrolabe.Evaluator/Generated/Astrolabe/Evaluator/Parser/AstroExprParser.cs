//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/doolse/astrolabe/astrolabe-common/Astrolabe.Evaluator/AstroExpr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Astrolabe.Evaluator.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AstroExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Number=12, LPAR=13, RPAR=14, LBRAC=15, RBRAC=16, MINUS=17, 
		PLUS=18, DOT=19, MUL=20, COMMA=21, LESS=22, MORE_=23, LE=24, GE=25, APOS=26, 
		QUOT=27, AND=28, OR=29, EQ=30, NE=31, False=32, True=33, Null=34, COND=35, 
		NOT=36, Literal=37, Whitespace=38, Identifier=39;
	public const int
		RULE_main = 0, RULE_expr = 1, RULE_primaryExpr = 2, RULE_objectField = 3, 
		RULE_objectLiteral = 4, RULE_arrayLiteral = 5, RULE_functionCall = 6, 
		RULE_variableAssign = 7, RULE_letExpr = 8, RULE_lambdaExpr = 9, RULE_variableReference = 10;
	public static readonly string[] ruleNames = {
		"main", "expr", "primaryExpr", "objectField", "objectLiteral", "arrayLiteral", 
		"functionCall", "variableAssign", "letExpr", "lambdaExpr", "variableReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "'/'", "'%'", "'??'", "':'", "'{'", "'}'", "':='", "'let'", "'in'", 
		"'=>'", "'$'", null, "'('", "')'", "'['", "']'", "'-'", "'+'", "'.'", 
		"'*'", "','", "'<'", "'>'", "'<='", "'>='", "'''", "'\"'", "'and'", "'or'", 
		"'='", "'!='", "'false'", "'true'", "'null'", "'?'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Number", "LPAR", "RPAR", "LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", 
		"COMMA", "LESS", "MORE_", "LE", "GE", "APOS", "QUOT", "AND", "OR", "EQ", 
		"NE", "False", "True", "Null", "COND", "NOT", "Literal", "Whitespace", 
		"Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AstroExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AstroExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AstroExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AstroExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AstroExprParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			expr(0);
			State = 23;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AstroExprParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AstroExprParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AstroExprParser.PLUS, 0); }
		public UnaryOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public PrimaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AstroExprParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(AstroExprParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AstroExprParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AstroExprParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(AstroExprParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_() { return GetToken(AstroExprParser.MORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(AstroExprParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(AstroExprParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AstroExprParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(AstroExprParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(AstroExprParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(AstroExprParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRAC() { return GetToken(AstroExprParser.LBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRAC() { return GetToken(AstroExprParser.RBRAC, 0); }
		public BinOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COND() { return GetToken(AstroExprParser.COND, 0); }
		public TernaryOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__7:
			case T__10:
			case Number:
			case LPAR:
			case LBRAC:
			case False:
			case True:
			case Null:
			case Literal:
			case Identifier:
				{
				_localctx = new PrimaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 26;
				primaryExpr();
				}
				break;
			case MINUS:
			case PLUS:
			case NOT:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68719869952L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 28;
				expr(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 66;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 31;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 32;
						Match(DOT);
						State = 33;
						expr(11);
						}
						break;
					case 2:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 34;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 35;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1048582L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 36;
						expr(10);
						}
						break;
					case 3:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 37;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 38;
						_la = TokenStream.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39;
						expr(9);
						}
						break;
					case 4:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 40;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 41;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42;
						expr(8);
						}
						break;
					case 5:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 43;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 44;
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45;
						expr(7);
						}
						break;
					case 6:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 46;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 47;
						Match(AND);
						State = 48;
						expr(6);
						}
						break;
					case 7:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 49;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 50;
						Match(OR);
						State = 51;
						expr(5);
						}
						break;
					case 8:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 53;
						Match(T__2);
						State = 54;
						expr(4);
						}
						break;
					case 9:
						{
						_localctx = new TernaryOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 56;
						Match(COND);
						State = 57;
						expr(0);
						State = 58;
						Match(T__3);
						State = 59;
						expr(1);
						}
						break;
					case 10:
						{
						_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 62;
						Match(LBRAC);
						State = 63;
						expr(0);
						State = 64;
						Match(RBRAC);
						}
						break;
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExprContext lambdaExpr() {
			return GetRuleContext<LambdaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetExprContext letExpr() {
			return GetRuleContext<LetExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(AstroExprParser.Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(AstroExprParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(AstroExprParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(AstroExprParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(AstroExprParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_primaryExpr);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				arrayLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				objectLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74;
				lambdaExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				variableReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 76;
				Match(LPAR);
				State = 77;
				expr(0);
				State = 78;
				Match(RPAR);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 80;
				letExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 81;
				Match(Literal);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 82;
				Match(Number);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 83;
				Match(False);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 84;
				Match(True);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 85;
				Match(Null);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 86;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			expr(0);
			State = 90;
			Match(T__3);
			State = 91;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__4);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 785979455776L) != 0)) {
				{
				State = 94;
				objectField();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 97;
				Match(COMMA);
				State = 98;
				objectField();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRAC() { return GetToken(AstroExprParser.LBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRAC() { return GetToken(AstroExprParser.RBRAC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(LBRAC);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 785979455776L) != 0)) {
				{
				State = 107;
				expr(0);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 108;
					Match(COMMA);
					State = 109;
					expr(0);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 117;
			Match(RBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(AstroExprParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(AstroExprParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			variableReference();
			State = 120;
			Match(LPAR);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 785979455776L) != 0)) {
				{
				State = 121;
				expr(0);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 122;
					Match(COMMA);
					State = 123;
					expr(0);
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 131;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignContext variableAssign() {
		VariableAssignContext _localctx = new VariableAssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			variableReference();
			State = 134;
			Match(T__6);
			State = 135;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignContext[] variableAssign() {
			return GetRuleContexts<VariableAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignContext variableAssign(int i) {
			return GetRuleContext<VariableAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AstroExprParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AstroExprParser.COMMA, i);
		}
		public LetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetExprContext letExpr() {
		LetExprContext _localctx = new LetExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_letExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__7);
			{
			State = 138;
			variableAssign();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 139;
				Match(COMMA);
				State = 140;
				variableAssign();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 146;
			Match(T__8);
			State = 147;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LambdaExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExprContext lambdaExpr() {
		LambdaExprContext _localctx = new LambdaExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_lambdaExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			variableReference();
			State = 150;
			Match(T__9);
			State = 151;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AstroExprParser.Identifier, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAstroExprVisitor<TResult> typedVisitor = visitor as IAstroExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__10);
			State = 154;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,39,157,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,30,8,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
		1,67,8,1,10,1,12,1,70,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,88,8,2,1,3,1,3,1,3,1,3,1,4,1,4,3,4,96,8,4,1,4,
		1,4,5,4,100,8,4,10,4,12,4,103,9,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,111,8,5,
		10,5,12,5,114,9,5,3,5,116,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,125,8,6,
		10,6,12,6,128,9,6,3,6,130,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		5,8,142,8,8,10,8,12,8,145,9,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,0,1,2,11,0,2,4,6,8,10,12,14,16,18,20,0,5,2,0,17,18,36,36,2,0,1,
		2,20,20,1,0,17,18,1,0,22,25,1,0,30,31,175,0,22,1,0,0,0,2,29,1,0,0,0,4,
		87,1,0,0,0,6,89,1,0,0,0,8,93,1,0,0,0,10,106,1,0,0,0,12,119,1,0,0,0,14,
		133,1,0,0,0,16,137,1,0,0,0,18,149,1,0,0,0,20,153,1,0,0,0,22,23,3,2,1,0,
		23,24,5,0,0,1,24,1,1,0,0,0,25,26,6,1,-1,0,26,30,3,4,2,0,27,28,7,0,0,0,
		28,30,3,2,1,2,29,25,1,0,0,0,29,27,1,0,0,0,30,68,1,0,0,0,31,32,10,10,0,
		0,32,33,5,19,0,0,33,67,3,2,1,11,34,35,10,9,0,0,35,36,7,1,0,0,36,67,3,2,
		1,10,37,38,10,8,0,0,38,39,7,2,0,0,39,67,3,2,1,9,40,41,10,7,0,0,41,42,7,
		3,0,0,42,67,3,2,1,8,43,44,10,6,0,0,44,45,7,4,0,0,45,67,3,2,1,7,46,47,10,
		5,0,0,47,48,5,28,0,0,48,67,3,2,1,6,49,50,10,4,0,0,50,51,5,29,0,0,51,67,
		3,2,1,5,52,53,10,3,0,0,53,54,5,3,0,0,54,67,3,2,1,4,55,56,10,1,0,0,56,57,
		5,35,0,0,57,58,3,2,1,0,58,59,5,4,0,0,59,60,3,2,1,1,60,67,1,0,0,0,61,62,
		10,11,0,0,62,63,5,15,0,0,63,64,3,2,1,0,64,65,5,16,0,0,65,67,1,0,0,0,66,
		31,1,0,0,0,66,34,1,0,0,0,66,37,1,0,0,0,66,40,1,0,0,0,66,43,1,0,0,0,66,
		46,1,0,0,0,66,49,1,0,0,0,66,52,1,0,0,0,66,55,1,0,0,0,66,61,1,0,0,0,67,
		70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,3,1,0,0,0,70,68,1,0,0,0,71,88,
		3,12,6,0,72,88,3,10,5,0,73,88,3,8,4,0,74,88,3,18,9,0,75,88,3,20,10,0,76,
		77,5,13,0,0,77,78,3,2,1,0,78,79,5,14,0,0,79,88,1,0,0,0,80,88,3,16,8,0,
		81,88,5,37,0,0,82,88,5,12,0,0,83,88,5,32,0,0,84,88,5,33,0,0,85,88,5,34,
		0,0,86,88,5,39,0,0,87,71,1,0,0,0,87,72,1,0,0,0,87,73,1,0,0,0,87,74,1,0,
		0,0,87,75,1,0,0,0,87,76,1,0,0,0,87,80,1,0,0,0,87,81,1,0,0,0,87,82,1,0,
		0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,5,1,0,0,
		0,89,90,3,2,1,0,90,91,5,4,0,0,91,92,3,2,1,0,92,7,1,0,0,0,93,95,5,5,0,0,
		94,96,3,6,3,0,95,94,1,0,0,0,95,96,1,0,0,0,96,101,1,0,0,0,97,98,5,21,0,
		0,98,100,3,6,3,0,99,97,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,
		1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,5,6,0,0,105,9,1,0,0,0,
		106,115,5,15,0,0,107,112,3,2,1,0,108,109,5,21,0,0,109,111,3,2,1,0,110,
		108,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,116,1,
		0,0,0,114,112,1,0,0,0,115,107,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,
		117,118,5,16,0,0,118,11,1,0,0,0,119,120,3,20,10,0,120,129,5,13,0,0,121,
		126,3,2,1,0,122,123,5,21,0,0,123,125,3,2,1,0,124,122,1,0,0,0,125,128,1,
		0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,
		129,121,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,14,0,0,132,13,
		1,0,0,0,133,134,3,20,10,0,134,135,5,7,0,0,135,136,3,2,1,0,136,15,1,0,0,
		0,137,138,5,8,0,0,138,143,3,14,7,0,139,140,5,21,0,0,140,142,3,14,7,0,141,
		139,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,146,1,
		0,0,0,145,143,1,0,0,0,146,147,5,9,0,0,147,148,3,2,1,0,148,17,1,0,0,0,149,
		150,3,20,10,0,150,151,5,10,0,0,151,152,3,2,1,0,152,19,1,0,0,0,153,154,
		5,11,0,0,154,155,5,39,0,0,155,21,1,0,0,0,11,29,66,68,87,95,101,112,115,
		126,129,143
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Astrolabe.Evaluator.Parser
